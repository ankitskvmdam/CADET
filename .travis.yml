
# Exclude GitHub pages and AppVeyor branches
branches:
  except:
    - gh-pages
    - /feature\/.*appveyor.*/

language: cpp
sudo: false

# Use Linux unless specified otherwise
os: linux
dist: trusty

git:
  depth: 2

#cache:
#  directories:
#    - ${TRAVIS_BUILD_DIR}/deps

matrix:
  include:

    # Clang on OSX

    # XCode 9.1 on OS X 10.12
    - env: COMPILERCPP=clang++ COMPILERC=clang NTHREADS=0 BUILD_TYPE=Release
      os: osx
      osx_image: xcode9.1
      compiler: clang

    # XCode 9.3 on OS X 10.13
    - env: COMPILERCPP=clang++ COMPILERC=clang NTHREADS=0 BUILD_TYPE=Release
      os: osx
      osx_image: xcode9.3beta
      compiler: clang

    # Clang on Linux

    # Clang 5.0
    - env: COMPILERCPP=clang++-5.0 COMPILERC=clang-5.0 NTHREADS=0 BUILD_TYPE=Release
      addons:
        apt:
          packages:
            - clang-5.0
            - llvm-5.0-dev 
            - g++-5
            - gcc-5
            - cmake
            - libblas-dev
            - liblapack-dev
            - libhdf5-dev
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-trusty-5.0
            - sourceline: 'deb http://apt.llvm.org/trusty/ llvm-toolchain-trusty-4.0 main'
              key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'

    # GCC on Linux

    # GCC 6
    - env: COMPILERCPP=g++-6 COMPILERC=gcc-6 NTHREADS=1 BUILD_TYPE=Release
      addons:
        apt:
          packages: 
            - g++-6
            - gcc-6
            - cmake
            - libblas-dev
            - liblapack-dev
            - libhdf5-dev
          sources:
            - ubuntu-toolchain-r-test

before_install:
  # Dependencies required by the CI are installed in ${TRAVIS_BUILD_DIR}/deps/
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir -p "${DEPS_DIR}"
  - cd "${DEPS_DIR}"
  # OSX: Install packages
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew update
      brew install cmake --without-docs || brew upgrade cmake
      brew install hdf5 || brew upgrade hdf5
      brew install tbb || brew upgrade tbb
      brew install sundials --without-mpi || brew upgrade sundials
    fi
  - export CXX=${COMPILERCPP}
  - export CC=${COMPILERC}
  - ${CC} --version
  - ${CXX} --version
  # Travis machines have 2 cores
  - JOBS=2
  # Linux: Install a recent CMake
  - CMAKE_VERSION=3.10.2
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v${CMAKE_VERSION%.[0-9]}/cmake-${CMAKE_VERSION}-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    fi
  - cmake --version
  # Linux: Install the right version of libc++
  - |
    LLVM_INSTALL=${DEPS_DIR}/llvm/install
    # If in linux and compiler clang and llvm not installed
    if [[ "${TRAVIS_OS_NAME}" == "linux" && "${CXX%%+*}" == "clang" ]]; then
      if [[ ! -d "${DEPS_DIR}/llvm" || ! -d "${LLVM_INSTALL}" ]]; then
        if   [[ "${CXX}" == "clang++-3.6" ]]; then LLVM_VERSION="3.6.2";
        elif [[ "${CXX}" == "clang++-3.7" ]]; then LLVM_VERSION="3.7.1";
        elif [[ "${CXX}" == "clang++-3.8" ]]; then LLVM_VERSION="3.8.1";
        elif [[ "${CXX}" == "clang++-3.9" ]]; then LLVM_VERSION="3.9.1";
        elif [[ "${CXX}" == "clang++-5.0" ]]; then LLVM_VERSION="5.0.0";
        fi
        LLVM_URL="http://llvm.org/releases/${LLVM_VERSION}/llvm-${LLVM_VERSION}.src.tar.xz"
        LIBCXX_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxx-${LLVM_VERSION}.src.tar.xz"
        LIBCXXABI_URL="http://llvm.org/releases/${LLVM_VERSION}/libcxxabi-${LLVM_VERSION}.src.tar.xz"
        mkdir -p llvm llvm/build llvm/projects/libcxx llvm/projects/libcxxabi
        travis_retry wget -O - ${LLVM_URL} | tar --strip-components=1 -xJ -C llvm
        travis_retry wget -O - ${LIBCXX_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxx
        travis_retry wget -O - ${LIBCXXABI_URL} | tar --strip-components=1 -xJ -C llvm/projects/libcxxabi
        (cd llvm/build && cmake .. -DCMAKE_INSTALL_PREFIX=${LLVM_INSTALL})
        (cd llvm/build/projects/libcxx && make install -j${JOBS})
        (cd llvm/build/projects/libcxxabi && make install -j${JOBS})
      fi
      export CXXFLAGS="-isystem ${LLVM_INSTALL}/include/c++/v1"
      export LDFLAGS="-L ${LLVM_INSTALL}/lib -l c++ -l c++abi"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${LLVM_INSTALL}/lib"
    fi
  # Linux: Install SUNDIALS
  - |
    SUNDIALS_INSTALL=${DEPS_DIR}/sundials/install
    SUNDIALS_VERSION="2.7.0"
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      if [[ ! -d "${DEPS_DIR}/sundials" || ! -d "${SUNDIALS_INSTALL}" ]]; then
        SUNDIALS_URL="https://computation.llnl.gov/projects/sundials/download/sundials-${SUNDIALS_VERSION}.tar.gz"
        mkdir -p sundials sundials/build
        travis_retry wget -O - ${SUNDIALS_URL} | tar --strip-components=1 -xz -C sundials
        (cd sundials/build && cmake .. -DCMAKE_INSTALL_PREFIX=${SUNDIALS_INSTALL} -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DEXAMPLES_ENABLE=OFF -DOPENMP_ENABLE=ON -DBUILD_KINSOL=OFF -DBUILD_ARKODE=OFF -DBUILD_CVODE=OFF -DBUILD_CVODES=OFF -DEXAMPLES_ENABLE=OFF -DCMAKE_C_FLAGS=-fPIC)
        (cd sundials/build && make install -j${JOBS})
      fi
      export SUNDIALS_ROOT="${SUNDIALS_INSTALL}"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${SUNDIALS_INSTALL}/lib"
    fi
  # Linux: Install TBB
  - |
    TBB_INSTALL=${DEPS_DIR}/tbb/install
    TBB_VERSION="2018_U2"
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      if [[ ! -d "${DEPS_DIR}/tbb" || ! -d "${TBB_INSTALL}" ]]; then
        TBB_URL="https://github.com/01org/tbb/archive/${TBB_VERSION}.tar.gz"
        mkdir -p tbb
        travis_retry wget -O - ${TBB_URL} | tar --strip-components=1 -xz -C tbb
        TBB_BUILD=${DEPS_DIR}/tbb/build
        if [[ "${CXX%%+*}" == "clang" ]]; then
          (cd tbb && make compiler=clang stdlib=libc++ stdver=c++14 tbb_build_dir=${TBB_BUILD} -j${JOBS})
          (cd tbb && make tbb_cpf=1 compiler=clang stdlib=libc++ stdver=c++14 tbb_build_dir=${TBB_BUILD} -j${JOBS})
        else
          (cd tbb && make compiler=gcc stdver=c++14 tbb_build_dir=${TBB_BUILD} -j${JOBS})
          (cd tbb && make tbb_cpf=1 compiler=gcc stdver=c++14 tbb_build_dir=${TBB_BUILD} -j${JOBS})
        fi
        mkdir -p ${TBB_INSTALL}/lib
        mkdir -p ${TBB_INSTALL}/include
        (cd tbb && cp -r include/tbb ${TBB_INSTALL}/include/)
        find ${TBB_BUILD} -iname '*.so*' -exec cp {} ${TBB_INSTALL}/lib/ \;
        mkdir -p ${TBB_INSTALL}/lib/intel64
        ln -s ${TBB_INSTALL}/lib ${TBB_INSTALL}/lib/intel64/gcc4.4
      fi
      export TBB_ROOT="${TBB_INSTALL}"
      export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${TBB_INSTALL}/lib"
      export LIBRARY_PATH="${LIBRARY_PATH}:${TBB_INSTALL}/lib"
    fi

before_script:
  # Configure CMake
  - cd "${TRAVIS_BUILD_DIR}"
  - mkdir build && cd build
  - cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=${TRAVIS_BUILD_DIR}/install
  
script:
  # Build and run tests
  - make install -j${JOBS}
  - test/testRunner -d yes --tbbthreads ${NTHREADS}
